// <auto-generated />
using System;
using Magentaize.FluentPlayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Magentaize.FluentPlayer.Data.Migrations
{
    [DbContext(typeof(FluentPlayerDbContext))]
    partial class FluentPlayerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview.19074.3");

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.Album", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlbumCover");

                    b.Property<long?>("ArtistId");

                    b.Property<string>("ArtworkPath");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.Folder", b =>
                {
                    b.Property<long>("FolderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<string>("SafePath");

                    b.Property<bool>("ShowInCollection");

                    b.HasKey("FolderId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.FolderTrack", b =>
                {
                    b.Property<long>("FolderTrackId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("FolderId");

                    b.Property<long?>("TrackId");

                    b.HasKey("FolderTrackId");

                    b.HasIndex("FolderId");

                    b.HasIndex("TrackId");

                    b.ToTable("FolderTracks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.IndexingTrack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("IndexingTracks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.RemovingTrack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("RemovingTracks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AlbumId");

                    b.Property<long?>("ArtistId");

                    b.Property<long?>("BitRate");

                    b.Property<long>("DateAdded");

                    b.Property<long>("DateFileCreated");

                    b.Property<long>("DateFileModified");

                    b.Property<long?>("DateLastPlayed");

                    b.Property<long>("DateLastSynced");

                    b.Property<long?>("DiscCount");

                    b.Property<long?>("DiscNumber");

                    b.Property<TimeSpan?>("Duration");

                    b.Property<string>("FileName");

                    b.Property<long?>("FileSize");

                    b.Property<string>("Genres");

                    b.Property<long?>("HasLyrics");

                    b.Property<string>("IndexingFailureReason");

                    b.Property<long?>("IndexingSuccess");

                    b.Property<long?>("Love");

                    b.Property<string>("MimeType");

                    b.Property<long?>("NeedsAlbumArtworkIndexing");

                    b.Property<long?>("NeedsIndexing");

                    b.Property<string>("Path");

                    b.Property<long?>("PlayCount");

                    b.Property<long?>("Rating");

                    b.Property<string>("SafePath");

                    b.Property<long?>("SampleRate");

                    b.Property<long?>("SkipCount");

                    b.Property<long?>("TrackCount");

                    b.Property<long?>("TrackNumber");

                    b.Property<string>("TrackTitle");

                    b.Property<long?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.Album", b =>
                {
                    b.HasOne("Magentaize.FluentPlayer.Data.Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.FolderTrack", b =>
                {
                    b.HasOne("Magentaize.FluentPlayer.Data.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("Magentaize.FluentPlayer.Data.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.Track", b =>
                {
                    b.HasOne("Magentaize.FluentPlayer.Data.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Magentaize.FluentPlayer.Data.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId");
                });
#pragma warning restore 612, 618
        }
    }
}
