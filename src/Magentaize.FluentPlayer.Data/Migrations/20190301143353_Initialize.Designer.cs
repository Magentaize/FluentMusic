// <auto-generated />
using System;
using Magentaize.FluentPlayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Magentaize.FluentPlayer.Data.Migrations
{
    [DbContext(typeof(FluentPlayerDbContext))]
    [Migration("20190301143353_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview.19074.3");

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.AlbumArtwork", b =>
                {
                    b.Property<long>("AlbumArtworkId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtworkId");

                    b.HasKey("AlbumArtworkId");

                    b.ToTable("AlbumArtworks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.Folder", b =>
                {
                    b.Property<long>("FolderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<string>("SafePath");

                    b.Property<bool>("ShowInCollection");

                    b.HasKey("FolderId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.FolderTrack", b =>
                {
                    b.Property<long>("FolderTrackId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("FolderId");

                    b.Property<long?>("TrackId");

                    b.HasKey("FolderTrackId");

                    b.HasIndex("FolderId");

                    b.HasIndex("TrackId");

                    b.ToTable("FolderTracks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.QueuedTrack", b =>
                {
                    b.Property<long>("QueuedTrackId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPlaying");

                    b.Property<long>("OrderId");

                    b.Property<string>("Path");

                    b.Property<long>("ProgressSeconds");

                    b.Property<string>("SafePath");

                    b.HasKey("QueuedTrackId");

                    b.ToTable("QueuedTracks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.RemovedTrack", b =>
                {
                    b.Property<long>("TrackId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DateRemoved");

                    b.Property<string>("Path");

                    b.Property<string>("SafePath");

                    b.HasKey("TrackId");

                    b.ToTable("RemovedTracks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.Track", b =>
                {
                    b.Property<long>("TrackId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlbumArtists");

                    b.Property<string>("AlbumKey");

                    b.Property<string>("AlbumTitle");

                    b.Property<string>("Artists");

                    b.Property<long?>("BitRate");

                    b.Property<long>("DateAdded");

                    b.Property<long>("DateFileCreated");

                    b.Property<long>("DateFileModified");

                    b.Property<long?>("DateLastPlayed");

                    b.Property<long>("DateLastSynced");

                    b.Property<long?>("DiscCount");

                    b.Property<long?>("DiscNumber");

                    b.Property<long?>("Duration");

                    b.Property<string>("FileName");

                    b.Property<long?>("FileSize");

                    b.Property<string>("Genres");

                    b.Property<long?>("HasLyrics");

                    b.Property<string>("IndexingFailureReason");

                    b.Property<long?>("IndexingSuccess");

                    b.Property<long?>("Love");

                    b.Property<string>("MimeType");

                    b.Property<long?>("NeedsAlbumArtworkIndexing");

                    b.Property<long?>("NeedsIndexing");

                    b.Property<string>("Path");

                    b.Property<long?>("PlayCount");

                    b.Property<long?>("Rating");

                    b.Property<string>("SafePath");

                    b.Property<long?>("SampleRate");

                    b.Property<long?>("SkipCount");

                    b.Property<long?>("TrackCount");

                    b.Property<long?>("TrackNumber");

                    b.Property<string>("TrackTitle");

                    b.Property<long?>("Year");

                    b.HasKey("TrackId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Magentaize.FluentPlayer.Data.FolderTrack", b =>
                {
                    b.HasOne("Magentaize.FluentPlayer.Data.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("Magentaize.FluentPlayer.Data.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId");
                });
#pragma warning restore 612, 618
        }
    }
}
