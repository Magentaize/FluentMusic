// <auto-generated />
using System;
using FluentMusic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FluentMusic.Data.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("FluentMusic.Data.Album", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverCacheToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("FluentMusic.Data.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("FluentMusic.Data.Folder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("FluentMusic.Data.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BitRate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DateAdded")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DateFileCreated")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DateFileModified")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DateLastPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DateLastSynced")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DiscCount")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DiscNumber")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genres")
                        .HasColumnType("TEXT");

                    b.Property<long?>("HasLyrics")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndexingFailureReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IndexingSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Love")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .HasColumnType("TEXT");

                    b.Property<long?>("NeedsAlbumArtworkIndexing")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NeedsIndexing")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PlayCount")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SafePath")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleRate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SkipCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TrackCount")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TrackNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("FolderId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("FluentMusic.Data.Album", b =>
                {
                    b.HasOne("FluentMusic.Data.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId");
                });

            modelBuilder.Entity("FluentMusic.Data.Track", b =>
                {
                    b.HasOne("FluentMusic.Data.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("FluentMusic.Data.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");
                });
#pragma warning restore 612, 618
        }
    }
}
